import { PrismaClient } from "@prisma/client"
import bcrypt from "bcryptjs"

const prisma = new PrismaClient()

// üöÄ Configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
const SEED_CONFIG = {
  TOTAL_USERS: 1_000_000, // ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  BATCH_SIZE: 1000, // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞ 1000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  SHOW_PROGRESS_EVERY: 10000, // ‡πÅ‡∏™‡∏î‡∏á progress ‡∏ó‡∏∏‡∏Å 10k ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
const THAI_FIRST_NAMES = [
  "‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
  "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á",
  "‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå",
  "‡∏™‡∏°‡πÉ‡∏à",
  "‡∏™‡∏°‡∏õ‡∏≠‡∏á",
  "‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢",
  "‡∏™‡∏°‡∏û‡∏£",
  "‡∏™‡∏°‡∏Ñ‡∏¥‡∏î",
  "‡∏™‡∏°‡∏ô‡∏∂‡∏Å",
  "‡∏™‡∏°‡∏£‡∏±‡∏Å",
  "‡∏™‡∏°‡∏§‡∏î‡∏µ",
  "‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
  "‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
  "‡∏™‡∏°‡∏û‡∏¥‡∏®",
  "‡∏™‡∏°‡∏§‡∏ó‡∏±‡∏¢",
  "‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á",
  "‡∏™‡∏°‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢",
  "‡∏™‡∏°‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥",
  "‡∏™‡∏°‡πÄ‡∏à‡∏ï‡∏ô‡πå",
  "‡∏™‡∏°‡πÄ‡∏î‡∏ä",
  "‡∏™‡∏°‡∏û‡∏á‡∏©‡πå",
  "‡∏™‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå",
  "‡∏™‡∏°‡∏¢‡∏®",
  "‡∏™‡∏°‡∏£‡∏π‡∏õ",
  "‡∏ß‡∏¥‡∏ä‡∏±‡∏¢",
  "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤",
  "‡∏ß‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏£",
  "‡∏ß‡∏¥‡∏®‡∏≤‡∏•",
  "‡∏ß‡∏¥‡∏©‡∏ì‡∏∏",
  "‡∏ß‡∏¥‡∏£‡∏±‡∏ä",
  "‡∏ß‡∏¥‡πÇ‡∏£‡∏à‡∏ô‡πå",
  "‡∏ß‡∏¥‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πå",
  "‡∏õ‡∏£‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏ê",
  "‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò",
  "‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå",
  "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤",
  "‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö",
  "‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå",
  "‡∏õ‡∏£‡∏∞‡∏ó‡∏µ‡∏õ",
  "‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö",
  "‡∏≠‡∏ô‡∏∏‡∏ä‡∏≤",
  "‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå",
  "‡∏≠‡∏ô‡∏∏‡∏û‡∏á‡∏©‡πå",
  "‡∏≠‡∏ô‡∏∏‡∏™‡∏£‡∏ì‡πå",
  "‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå",
  "‡∏≠‡∏°‡∏£",
  "‡∏≠‡∏£‡∏£‡∏ñ",
  "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
  "‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå",
  "‡∏ô‡∏¥‡∏ò‡∏¥",
  "‡∏ô‡∏¥‡∏û‡∏ô‡∏ò‡πå",
  "‡∏ô‡∏¥‡∏£‡∏∏‡∏ï‡∏ï‡∏¥‡πå",
  "‡∏ô‡∏¥‡∏Ñ‡∏°",
  "‡∏ô‡∏¥‡∏ï‡∏¥",
  "‡∏ô‡∏¥‡∏£‡∏±‡∏ô‡∏î‡∏£‡πå",
  "‡∏ô‡∏¥‡∏£‡∏∏‡∏ï",
]

const THAI_LAST_NAMES = [
  "‡πÉ‡∏à‡∏î‡∏µ",
  "‡∏£‡∏±‡∏Å‡∏î‡∏µ",
  "‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á",
  "‡πÄ‡∏à‡∏£‡∏¥‡∏ç",
  "‡∏™‡∏∏‡∏Ç‡πÉ‡∏™",
  "‡∏î‡∏µ‡∏á‡∏≤‡∏°",
  "‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏™",
  "‡πÄ‡∏â‡∏•‡∏µ‡∏¢‡∏ß‡∏â‡∏•‡∏≤‡∏î",
  "‡πÉ‡∏ù‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
  "‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏à",
  "‡∏á‡∏≤‡∏°‡∏™‡∏á‡πà‡∏≤",
  "‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á",
  "‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
  "‡πÅ‡∏õ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà",
  "‡∏§‡∏î‡∏π‡∏î‡∏µ",
  "‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤",
  "‡∏™‡∏∞‡∏î‡∏ß‡∏Å",
  "‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á",
  "‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à",
  "‡∏≠‡∏≥‡∏ô‡∏≤‡∏à",
  "‡∏™‡∏∑‡∏ö‡∏™‡∏≤‡∏¢",
  "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏î‡∏µ",
  "‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏¢‡∏®",
  "‡∏á‡∏≤‡∏°‡∏û‡∏£‡∏¥‡πâ‡∏á",
  "‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô",
  "‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡∏£‡∏≠‡∏á",
  "‡∏ú‡∏î‡∏∏‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥",
  "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå",
  "‡∏û‡∏±‡∏í‡∏ô‡∏≤",
  "‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏£‡∏∏‡πà‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏á",
  "‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏™‡∏∏‡∏Ç",
  "‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
  "‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå",
  "‡πÄ‡∏õ‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏∏‡∏Ç",
  "‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏à",
  "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏à",
  "‡∏™‡∏≤‡∏°‡∏±‡∏Ñ‡∏Ñ‡∏µ",
  "‡∏£‡∏ß‡∏°‡∏û‡∏•‡∏±‡∏á",
  "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
  "‡πÄ‡∏™‡∏µ‡∏¢‡∏™‡∏•‡∏∞",
  "‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏à",
  "‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå",
  "‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏ò‡∏£‡∏£‡∏°",
  "‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°",
  "‡∏ò‡∏£‡∏£‡∏°‡∏ô‡∏π‡∏ç",
  "‡∏®‡∏£‡∏±‡∏ó‡∏ò‡∏≤",
  "‡∏≠‡∏∏‡∏ó‡∏¥‡∏®",
  "‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô",
]

const DOMAINS = [
  "example.com",
  "test.com",
  "demo.com",
  "sample.com",
  "mock.com",
]

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (transliteration)
const THAI_TO_ENGLISH_MAP: { [key: string]: string } = {
  ‡∏Å: "k",
  ‡∏Ç: "kh",
  ‡∏Ñ: "kh",
  ‡∏á: "ng",
  ‡∏à: "j",
  ‡∏â: "ch",
  ‡∏ä: "ch",
  ‡∏ã: "s",
  ‡∏å: "ch",
  ‡∏ç: "y",
  ‡∏î: "d",
  ‡∏ï: "t",
  ‡∏ñ: "th",
  ‡∏ó: "th",
  ‡∏ò: "th",
  ‡∏ô: "n",
  ‡∏ö: "b",
  ‡∏õ: "p",
  ‡∏ú: "ph",
  ‡∏ù: "f",
  ‡∏û: "ph",
  ‡∏ü: "f",
  ‡∏†: "ph",
  ‡∏°: "m",
  ‡∏¢: "y",
  ‡∏£: "r",
  ‡∏•: "l",
  ‡∏ß: "w",
  ‡∏®: "s",
  ‡∏©: "s",
  ‡∏™: "s",
  ‡∏´: "h",
  ‡∏≠: "o",
  ‡∏Æ: "h",
  ‡∏∞: "a",
  ‡∏≤: "a",
  "‡∏¥": "i",
  "‡∏µ": "ii",
  "‡∏∂": "ue",
  "‡∏∑": "uue",
  "‡∏∏": "u",
  "‡∏π": "uu",
  ‡πÄ: "e",
  ‡πÅ: "ae",
  ‡πÇ: "o",
  ‡πÉ: "ai",
  ‡πÑ: "ai",
  ‡∏≥: "am",
  "‡πà": "",
  "‡πâ": "",
  "‡πä": "",
  "‡πã": "",
  "‡πå": "",
  "‡∏±": "a",
}

function transliterateThai(thaiText: string): string {
  return thaiText
    .split("")
    .map((char) => THAI_TO_ENGLISH_MAP[char] || char)
    .join("")
    .toLowerCase()
    .replace(/[^a-z]/g, "") // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
function generateRandomUser(index: number) {
  const firstName =
    THAI_FIRST_NAMES[Math.floor(Math.random() * THAI_FIRST_NAMES.length)]
  const lastName =
    THAI_LAST_NAMES[Math.floor(Math.random() * THAI_LAST_NAMES.length)]
  const domain = DOMAINS[Math.floor(Math.random() * DOMAINS.length)]

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö email
  const firstNameEng = transliterateThai(firstName)
  const lastNameEng = transliterateThai(lastName)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á email ‡∏ó‡∏µ‡πà unique (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
  const email = `${firstNameEng}${lastNameEng}${index}@${domain}`

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  const phonePrefix = ["08", "09"][Math.floor(Math.random() * 2)]
  const phoneNumber = `${phonePrefix}${Math.floor(Math.random() * 10)}-${String(
    Math.floor(Math.random() * 1000)
  ).padStart(3, "0")}-${String(Math.floor(Math.random() * 10000)).padStart(
    4,
    "0"
  )}`

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2 ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
  const randomDate = new Date(
    Date.now() - Math.random() * 2 * 365 * 24 * 60 * 60 * 1000
  )
  const updatedDate = new Date(
    randomDate.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000
  )

  return {
    fullName: `${firstName} ${lastName}`, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    email, // email ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    phoneNumber,
    createdAt: randomDate,
    updatedAt: updatedDate,
  }
}

async function main() {
  console.log("üå± Starting seed for MASSIVE DATA...")
  console.log(`üìä Target: ${SEED_CONFIG.TOTAL_USERS.toLocaleString()} users`)
  console.log(`üì¶ Batch size: ${SEED_CONFIG.BATCH_SIZE} users per batch`)

  const startTime = Date.now()

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  console.log("üóëÔ∏è  Clearing existing users...")
  await prisma.user.deleteMany()
  console.log("‚úÖ Cleared existing users")

  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  console.log("üîê Hashing default password...")
  const defaultPassword = await bcrypt.hash("123456", 12)
  console.log("‚úÖ Password hashed")

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á users ‡πÅ‡∏ö‡∏ö batch
  console.log("üë• Creating users in batches...")
  let totalCreated = 0

  const totalBatches = Math.ceil(
    SEED_CONFIG.TOTAL_USERS / SEED_CONFIG.BATCH_SIZE
  )

  for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
    const batchStartTime = Date.now()

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ batch
    const remainingUsers = SEED_CONFIG.TOTAL_USERS - totalCreated
    const currentBatchSize = Math.min(SEED_CONFIG.BATCH_SIZE, remainingUsers)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch ‡∏ô‡∏µ‡πâ
    const batchData: any[] = []
    for (let i = 0; i < currentBatchSize; i++) {
      const userIndex = totalCreated + i + 1
      const userData = generateRandomUser(userIndex)
      batchData.push({
        ...userData,
        password: defaultPassword,
      })
    }

    // Insert ‡πÅ‡∏ö‡∏ö batch (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£ insert ‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å)
    await prisma.user.createMany({
      data: batchData,
      skipDuplicates: true, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate email
    })

    totalCreated += currentBatchSize
    const batchTime = Date.now() - batchStartTime
    const avgTimePerRecord = batchTime / currentBatchSize

    // ‡πÅ‡∏™‡∏î‡∏á progress
    if (
      totalCreated % SEED_CONFIG.SHOW_PROGRESS_EVERY === 0 ||
      batchIndex === totalBatches - 1
    ) {
      const progress = ((totalCreated / SEED_CONFIG.TOTAL_USERS) * 100).toFixed(
        1
      )
      const elapsedTime = Date.now() - startTime
      const estimatedTotalTime =
        (elapsedTime / totalCreated) * SEED_CONFIG.TOTAL_USERS
      const remainingTime = estimatedTotalTime - elapsedTime

      console.log(
        `üìà Progress: ${totalCreated.toLocaleString()}/${SEED_CONFIG.TOTAL_USERS.toLocaleString()} (${progress}%)`
      )
      console.log(
        `‚è±Ô∏è  Batch ${
          batchIndex + 1
        }/${totalBatches}: ${batchTime}ms (${avgTimePerRecord.toFixed(
          2
        )}ms per record)`
      )
      console.log(
        `üïí Estimated remaining time: ${Math.round(remainingTime / 1000)}s`
      )
      console.log("---")
    }
  }

  const totalTime = Date.now() - startTime
  const avgTimePerRecord = totalTime / totalCreated

  console.log("üéâ Seed completed successfully!")
  console.log(`‚úÖ Created ${totalCreated.toLocaleString()} users`)
  console.log(`‚è±Ô∏è  Total time: ${(totalTime / 1000).toFixed(2)}s`)
  console.log(`üìä Average time per record: ${avgTimePerRecord.toFixed(2)}ms`)
  console.log(
    `üöÄ Records per second: ${Math.round(
      totalCreated / (totalTime / 1000)
    ).toLocaleString()}`
  )
}

main()
  .catch((e) => {
    console.error("‚ùå Seed failed:", e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })